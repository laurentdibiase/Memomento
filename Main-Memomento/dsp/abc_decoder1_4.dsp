//--------------------------------------------------------------------------------------//
//----------------------------------------abclib----------------------------------------//
//
//-------------------------------FAUST CODE FOR MIXED MUSIC-----------------------------//
//
//-------------------------------- BY ALAIN BONARDI - 2019 -----------------------------//
//--------------------------------------------------------------------------------------//

declare name "abc2Ddecoder1_4";
declare author "Alain Bonardi";
declare licence "GPLv3";

import("stdfaust.lib");

//--------------------------------------------------------------------------------------//
//HOA DECODER AT ORDER AO TO NL LOUDSPEAKERS//
//--------------------------------------------------------------------------------------//

//--------------------------------------------------------------------------------------//
//AMBISONIC ORDER AND NUMBER OF LOUDSPEAKERS
//--------------------------------------------------------------------------------------//
ao = 1;
nl = 4;

//--------------------------------------------------------------------------------------//
//CONTROL PARAMETERS: POSITIONS OF THE LOUDSPEAKERS IN DEGREES (anticlockwise)
//--------------------------------------------------------------------------------------//
direct = 2 * checkbox("h:decoder/v:global/directangles") - 1; 
offset = hslider("h:decoder/v:global/angularoffset [unit:deg]", 0, -180, 180, 1) * ma.PI / 180;
gain = hslider("h:decoder/v:global/gain [unit:dB]", 0, -127, 18, 0.01) : dbtogain;
a(ind) = (hslider("h:decoder/v:angles/a%ind [unit:deg]", ind * 45, -360, 360, 1) * ma.PI / 180. - direct * offset) : *(direct) : smoothLine;
//--------------------------------------------------------------------------------------//
// GAIN LINES IN PARALLEL
//--------------------------------------------------------------------------------------//
gainLine(n) = par(i, n, *(gain));
//--------------------------------------------------------------------------------------//
//AMBISONIC DECODING WITH IRREGULAR ORDER
//-------------------------------------------------------------------
mydecoder(n, p)	= par(i, 2*n+1, _) <: par(i, p, speaker(n, a(i))) : gainLine(p)
with 
{
   speaker(n,alpha)	= /(2), par(i, 2*n, _), ho.encoder(n,2/(2*n+1),alpha) : si.dot(2*n+1);
};

//--------------------------------------------------------------------------------------//
//DEFINITION OF A SMOOTHING FUNCTION FOR CONTROLLERS
//--------------------------------------------------------------------------------------//
smoothLine = si.smooth(ba.tau2pole(0.1));

//--------------------------------------------------------------------------------------//
// CONVERSION DB=>LINEAR
//--------------------------------------------------------------------------------------//
dbcontrol = _ <: ((_ > -127.0), ba.db2linear) : *;

//--------------------------------------------------------------------------------------//
//CONTROL PARAMETER: GAIN IN DB
//--------------------------------------------------------------------------------------//
dbtogain = smoothLine : dbcontrol;

//--------------------------------------------------------------------------------------//
//DECODING
//--------------------------------------------------------------------------------------//
process = mydecoder(ao, nl);